{
  "name": "LuckSeeker LINE Bot - Thai Fortune Telling",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-start",
      "name": "LINE Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "greeting",
              "leftValue": "={{ $json.events[0].message.text }}",
              "rightValue": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ",
              "operator": {
                "type": "string",
                "operation": "contains",
                "singleValue": true
              }
            },
            {
              "id": "hello",
              "leftValue": "={{ $json.events[0].message.text }}",
              "rightValue": "hello",
              "operator": {
                "type": "string",
                "operation": "contains",
                "singleValue": true
              }
            },
            {
              "id": "start",
              "leftValue": "={{ $json.events[0].message.text }}",
              "rightValue": "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
              "operator": {
                "type": "string",
                "operation": "contains",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "message-router",
      "name": "Message Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "birth-data",
              "leftValue": "={{ $json.events[0].message.text }}",
              "rightValue": "birth:",
              "operator": {
                "type": "string",
                "operation": "startsWith",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "birth-data-check",
      "name": "Birth Data Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "category-select",
              "leftValue": "={{ $json.events[0].message.text }}",
              "rightValue": "select_category:",
              "operator": {
                "type": "string",
                "operation": "startsWith",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "category-check",
      "name": "Category Selection Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "additional-data",
              "leftValue": "={{ $json.events[0].message.text }}",
              "rightValue": "additional:",
              "operator": {
                "type": "string",
                "operation": "startsWith",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "additional-data-check",
      "name": "Additional Data Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Check for cached birth data\nconst userId = $input.first().json.events[0].source.userId;\nconst fs = require('fs');\nconst path = require('path');\n\nconst dataPath = path.join(__dirname, '../data/birth_data.json');\nlet birthData = {};\n\ntry {\n  if (fs.existsSync(dataPath)) {\n    const data = fs.readFileSync(dataPath, 'utf8');\n    birthData = JSON.parse(data);\n  }\n} catch (error) {\n  console.error('Error reading birth data:', error);\n}\n\nconst userBirthData = birthData[userId];\n\nreturn {\n  userId: userId,\n  hasBirthData: !!userBirthData,\n  birthData: userBirthData || null,\n  messageText: 'greeting'\n};"
      },
      "id": "check-birth-data",
      "name": "Check Birth Data Cache",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [240, 140]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-data",
              "leftValue": "={{ $json.hasBirthData }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "birth-data-exists",
      "name": "Birth Data Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 140]
    },
    {
      "parameters": {
        "jsCode": "// Generate LIFF birth data form\nconst userId = $input.first().json.userId;\nconst liffId = process.env.LIFF_ID;\n\nconst welcomeMessage = {\n  type: 'flex',\n  altText: 'üåü ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LuckSeeker - ‡∏´‡∏°‡∏≠‡∏î‡∏π‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå AI üåü',\n  contents: {\n    type: 'bubble',\n    hero: {\n      type: 'image',\n      url: 'https://i.imgur.com/your-welcome-image.jpg',\n      size: 'full',\n      aspectRatio: '20:13',\n      aspectMode: 'cover'\n    },\n    body: {\n      type: 'box',\n      layout: 'vertical',\n      contents: [\n        {\n          type: 'text',\n          text: 'üåü ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LuckSeeker',\n          weight: 'bold',\n          size: 'xl',\n          color: '#1DB446'\n        },\n        {\n          type: 'text',\n          text: '‡∏´‡∏°‡∏≠‡∏î‡∏π‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå AI ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥',\n          size: 'md',\n          color: '#666666',\n          margin: 'md'\n        },\n        {\n          type: 'text',\n          text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏π‡∏î‡∏ß‡∏á',\n          size: 'sm',\n          color: '#999999',\n          margin: 'md'\n        }\n      ]\n    },\n    footer: {\n      type: 'box',\n      layout: 'vertical',\n      contents: [\n        {\n          type: 'button',\n          action: {\n            type: 'uri',\n            label: 'üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î',\n            uri: `https://liff.line.me/${liffId}`\n          },\n          style: 'primary',\n          color: '#1DB446'\n        }\n      ]\n    }\n  }\n};\n\nreturn {\n  userId: userId,\n  messageType: 'welcome',\n  message: welcomeMessage\n};"
      },
      "id": "generate-welcome",
      "name": "Generate Welcome Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 140]
    },
    {
      "parameters": {
        "jsCode": "// Generate category selection menu\nconst userId = $input.first().json.userId;\n\nconst categoryMenu = {\n  type: 'flex',\n  altText: 'üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π',\n  contents: {\n    type: 'bubble',\n    header: {\n      type: 'box',\n      layout: 'vertical',\n      contents: [\n        {\n          type: 'text',\n          text: 'üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†',\n          weight: 'bold',\n          size: 'xl',\n          color: '#1DB446'\n        },\n        {\n          type: 'text',\n          text: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏á',\n          size: 'sm',\n          color: '#666666'\n        }\n      ]\n    },\n    body: {\n      type: 'box',\n      layout: 'vertical',\n      contents: [\n        {\n          type: 'button',\n          action: {\n            type: 'message',\n            label: 'üé∞ ‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢',\n            text: 'select_category:lottery'\n          },\n          style: 'primary',\n          color: '#FF6B6B'\n        },\n        {\n          type: 'button',\n          action: {\n            type: 'message',\n            label: 'üíï ‡∏û‡∏ö‡∏£‡∏±‡∏Å',\n            text: 'select_category:love'\n          },\n          style: 'primary',\n          color: '#FF69B4',\n          margin: 'sm'\n        },\n        {\n          type: 'button',\n          action: {\n            type: 'message',\n            label: 'üíº ‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',\n            text: 'select_category:business'\n          },\n          style: 'primary',\n          color: '#4ECDC4',\n          margin: 'sm'\n        },\n        {\n          type: 'button',\n          action: {\n            type: 'message',\n            label: 'üîÑ ‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',\n            text: 'select_category:relocation'\n          },\n          style: 'primary',\n          color: '#45B7D1',\n          margin: 'sm'\n        }\n      ]\n    }\n  }\n};\n\nreturn {\n  userId: userId,\n  messageType: 'category_menu',\n  message: categoryMenu\n};"
      },
      "id": "generate-category-menu",
      "name": "Generate Category Menu",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 140]
    },
    {
      "parameters": {
        "jsCode": "// Parse birth data and generate birth chart\nconst userId = $input.first().json.events[0].source.userId;\nconst messageText = $input.first().json.events[0].message.text;\n\n// Extract birth data from message\nconst birthDataString = messageText.replace('birth:', '');\nconst birthData = JSON.parse(birthDataString);\n\n// Swiss Ephemeris birth chart calculation\nconst swisseph = require('swisseph');\nconst moment = require('moment');\n\nconst birthDate = moment(birthData.birthDate + ' ' + birthData.birthTime);\nconst julianDay = swisseph.swe_julday(\n  birthDate.year(),\n  birthDate.month() + 1,\n  birthDate.date(),\n  birthDate.hour() + birthDate.minute() / 60.0,\n  swisseph.SE_GREG_CAL\n);\n\n// Calculate planetary positions\nconst planets = {\n  sun: swisseph.swe_calc_ut(julianDay, swisseph.SE_SUN, swisseph.SEFLG_SPEED)[0],\n  moon: swisseph.swe_calc_ut(julianDay, swisseph.SE_MOON, swisseph.SEFLG_SPEED)[0],\n  mercury: swisseph.swe_calc_ut(julianDay, swisseph.SE_MERCURY, swisseph.SEFLG_SPEED)[0],\n  venus: swisseph.swe_calc_ut(julianDay, swisseph.SE_VENUS, swisseph.SEFLG_SPEED)[0],\n  mars: swisseph.swe_calc_ut(julianDay, swisseph.SE_MARS, swisseph.SEFLG_SPEED)[0],\n  jupiter: swisseph.swe_calc_ut(julianDay, swisseph.SE_JUPITER, swisseph.SEFLG_SPEED)[0],\n  saturn: swisseph.swe_calc_ut(julianDay, swisseph.SE_SATURN, swisseph.SEFLG_SPEED)[0]\n};\n\nconst birthChart = {\n  userId: userId,\n  birthData: birthData,\n  julianDay: julianDay,\n  planets: planets,\n  createdAt: new Date().toISOString()\n};\n\n// Save birth chart to database\nconst fs = require('fs');\nconst path = require('path');\n\nconst dataPath = path.join(__dirname, '../data/birth_data.json');\nlet allBirthData = {};\n\ntry {\n  if (fs.existsSync(dataPath)) {\n    const data = fs.readFileSync(dataPath, 'utf8');\n    allBirthData = JSON.parse(data);\n  }\n} catch (error) {\n  console.error('Error reading birth data:', error);\n}\n\nallBirthData[userId] = birthChart;\n\ntry {\n  fs.writeFileSync(dataPath, JSON.stringify(allBirthData, null, 2));\n} catch (error) {\n  console.error('Error saving birth data:', error);\n}\n\nreturn {\n  userId: userId,\n  birthChart: birthChart,\n  messageType: 'birth_chart_generated'\n};"
      },
      "id": "generate-birth-chart",
      "name": "Generate Birth Chart",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 460]
    },
    {
      "parameters": {
        "jsCode": "// Handle category selection and generate additional data form\nconst userId = $input.first().json.events[0].source.userId;\nconst messageText = $input.first().json.events[0].message.text;\nconst liffId = process.env.LIFF_ID;\n\nconst category = messageText.replace('select_category:', '');\n\nconst additionalDataForm = {\n  type: 'flex',\n  altText: `üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${category}`,\n  contents: {\n    type: 'bubble',\n    header: {\n      type: 'box',\n      layout: 'vertical',\n      contents: [\n        {\n          type: 'text',\n          text: `üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`,\n          weight: 'bold',\n          size: 'xl',\n          color: '#1DB446'\n        },\n        {\n          type: 'text',\n          text: `‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏á ${category}`,\n          size: 'sm',\n          color: '#666666'\n        }\n      ]\n    },\n    body: {\n      type: 'box',\n      layout: 'vertical',\n      contents: [\n        {\n          type: 'text',\n          text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥',\n          size: 'sm',\n          color: '#999999',\n          wrap: true\n        }\n      ]\n    },\n    footer: {\n      type: 'box',\n      layout: 'vertical',\n      contents: [\n        {\n          type: 'button',\n          action: {\n            type: 'uri',\n            label: 'üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',\n            uri: `https://liff.line.me/${liffId}/input?category=${category}`\n          },\n          style: 'primary',\n          color: '#1DB446'\n        }\n      ]\n    }\n  }\n};\n\n// Save selected category\nconst fs = require('fs');\nconst path = require('path');\n\nconst categoryPath = path.join(__dirname, '../data/categories.json');\nlet categoryData = {};\n\ntry {\n  if (fs.existsSync(categoryPath)) {\n    const data = fs.readFileSync(categoryPath, 'utf8');\n    categoryData = JSON.parse(data);\n  }\n} catch (error) {\n  console.error('Error reading category data:', error);\n}\n\ncategoryData[userId] = {\n  category: category,\n  selectedAt: new Date().toISOString()\n};\n\ntry {\n  fs.writeFileSync(categoryPath, JSON.stringify(categoryData, null, 2));\n} catch (error) {\n  console.error('Error saving category data:', error);\n}\n\nreturn {\n  userId: userId,\n  category: category,\n  message: additionalDataForm,\n  messageType: 'additional_data_form'\n};"
      },
      "id": "handle-category-selection",
      "name": "Handle Category Selection",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 460]
    },
    {
      "parameters": {
        "jsCode": "// Parse additional data and calculate current transits\nconst userId = $input.first().json.events[0].source.userId;\nconst messageText = $input.first().json.events[0].message.text;\n\n// Extract additional data\nconst additionalDataString = messageText.replace('additional:', '');\nconst additionalData = JSON.parse(additionalDataString);\n\n// Get birth chart data\nconst fs = require('fs');\nconst path = require('path');\n\nconst birthDataPath = path.join(__dirname, '../data/birth_data.json');\nlet birthChart = null;\n\ntry {\n  if (fs.existsSync(birthDataPath)) {\n    const data = fs.readFileSync(birthDataPath, 'utf8');\n    const allBirthData = JSON.parse(data);\n    birthChart = allBirthData[userId];\n  }\n} catch (error) {\n  console.error('Error reading birth chart:', error);\n}\n\nif (!birthChart) {\n  return { error: 'Birth chart not found' };\n}\n\n// Calculate current transits\nconst swisseph = require('swisseph');\nconst moment = require('moment');\n\nconst now = moment();\nconst currentJulianDay = swisseph.swe_julday(\n  now.year(),\n  now.month() + 1,\n  now.date(),\n  now.hour() + now.minute() / 60.0,\n  swisseph.SE_GREG_CAL\n);\n\n// Calculate current planetary positions\nconst currentPlanets = {\n  sun: swisseph.swe_calc_ut(currentJulianDay, swisseph.SE_SUN, swisseph.SEFLG_SPEED)[0],\n  moon: swisseph.swe_calc_ut(currentJulianDay, swisseph.SE_MOON, swisseph.SEFLG_SPEED)[0],\n  mercury: swisseph.swe_calc_ut(currentJulianDay, swisseph.SE_MERCURY, swisseph.SEFLG_SPEED)[0],\n  venus: swisseph.swe_calc_ut(currentJulianDay, swisseph.SE_VENUS, swisseph.SEFLG_SPEED)[0],\n  mars: swisseph.swe_calc_ut(currentJulianDay, swisseph.SE_MARS, swisseph.SEFLG_SPEED)[0],\n  jupiter: swisseph.swe_calc_ut(currentJulianDay, swisseph.SE_JUPITER, swisseph.SEFLG_SPEED)[0],\n  saturn: swisseph.swe_calc_ut(currentJulianDay, swisseph.SE_SATURN, swisseph.SEFLG_SPEED)[0]\n};\n\n// Calculate aspects and lucky score\nfunction calculateAspect(angle1, angle2) {\n  const diff = Math.abs(angle1 - angle2);\n  const normalizedDiff = diff > 180 ? 360 - diff : diff;\n  \n  if (normalizedDiff <= 5) return { type: 'conjunction', score: 40 };\n  if (Math.abs(normalizedDiff - 60) <= 5) return { type: 'sextile', score: 20 };\n  if (Math.abs(normalizedDiff - 90) <= 5) return { type: 'square', score: -30 };\n  if (Math.abs(normalizedDiff - 120) <= 5) return { type: 'trine', score: 30 };\n  if (Math.abs(normalizedDiff - 180) <= 5) return { type: 'opposition', score: -40 };\n  \n  return { type: 'none', score: 0 };\n}\n\nconst aspects = [];\nlet totalScore = 0;\n\n// Calculate transit aspects\nfor (const [transitPlanet, transitPos] of Object.entries(currentPlanets)) {\n  for (const [natalPlanet, natalPos] of Object.entries(birthChart.planets)) {\n    const aspect = calculateAspect(transitPos.longitude, natalPos.longitude);\n    if (aspect.type !== 'none') {\n      aspects.push({\n        transit: transitPlanet,\n        natal: natalPlanet,\n        aspect: aspect.type,\n        score: aspect.score,\n        angle: Math.abs(transitPos.longitude - natalPos.longitude)\n      });\n      totalScore += aspect.score;\n    }\n  }\n}\n\n// Normalize score to 0-100 range\nconst luckyScore = Math.max(0, Math.min(100, 50 + totalScore));\n\nreturn {\n  userId: userId,\n  additionalData: additionalData,\n  birthChart: birthChart,\n  currentTransits: currentPlanets,\n  aspects: aspects,\n  luckyScore: luckyScore,\n  messageType: 'ready_for_ai'\n};"
      },
      "id": "calculate-transits",
      "name": "Calculate Transits & Lucky Score",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 460]
    },
    {
      "parameters": {
        "jsCode": "// Check fortune cache before calling AI\nconst data = $input.first().json;\nconst userId = data.userId;\nconst category = data.additionalData.category;\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst fortunePath = path.join(__dirname, '../data/fortunes.json');\nlet fortuneData = {};\n\ntry {\n  if (fs.existsSync(fortunePath)) {\n    const cachedData = fs.readFileSync(fortunePath, 'utf8');\n    fortuneData = JSON.parse(cachedData);\n  }\n} catch (error) {\n  console.error('Error reading fortune cache:', error);\n}\n\nconst cacheKey = `${userId}_${category}`;\nconst cachedFortune = fortuneData[cacheKey];\n\n// Check if cache is still valid (1 hour)\nif (cachedFortune && cachedFortune.createdAt) {\n  const cacheTime = new Date(cachedFortune.createdAt);\n  const now = new Date();\n  const hoursSinceCache = (now - cacheTime) / (1000 * 60 * 60);\n  \n  if (hoursSinceCache < 1) {\n    return {\n      ...data,\n      useCachedFortune: true,\n      cachedFortune: cachedFortune\n    };\n  }\n}\n\nreturn {\n  ...data,\n  useCachedFortune: false,\n  needsAiCall: true\n};"
      },
      "id": "check-fortune-cache",
      "name": "Check Fortune Cache",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 460]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "use-cache",
              "leftValue": "={{ $json.useCachedFortune }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "cache-decision",
      "name": "Use Cache or Call AI?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1560, 460]
    },
    {
      "parameters": {
        "jsCode": "// Generate AI prompt for fortune telling\nconst data = $input.first().json;\nconst userId = data.userId;\nconst category = data.additionalData.category;\nconst birthChart = data.birthChart;\nconst luckyScore = data.luckyScore;\nconst aspects = data.aspects;\n\n// Generate system prompt\nconst systemPrompt = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ \"‡∏ô‡πâ‡∏≠‡∏á‡∏•‡∏±‡∏Å‡∏Å‡∏µ‡πâ\" ‡∏´‡∏°‡∏≠‡∏î‡∏π‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Birth Chart ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏î‡∏ß‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢\n\n**‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:**\n1. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô\n2. ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Birth Chart ‡πÅ‡∏•‡∏∞ Transit ‡∏à‡∏£‡∏¥‡∏á ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç\n3. ‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏° Format ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô\n4. ‡∏ñ‡πâ‡∏≤ Lucky Score ‚â• 80 ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î\n5. ‡∏ñ‡πâ‡∏≤ Lucky Score < 80 ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤\n\n**Format ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:**\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n**‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤** : [‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ß‡∏•‡∏≤]\n**Lucky-Score** : [‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô] / 100  [‚úÖ ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÄ‡∏Å‡∏ì‡∏ë‡πå / ‚ùå ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå]\n**‡∏î‡∏≤‡∏ß‡∏à‡∏£‡πÄ‡∏î‡πà‡∏ô** : [‡∏î‡∏≤‡∏ß‡∏à‡∏£ Aspect ‡∏≠‡∏á‡∏®‡∏≤] | [‡∏î‡∏≤‡∏ß‡∏à‡∏£ Aspect ‡∏≠‡∏á‡∏®‡∏≤]\n**‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î** : [‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‚â• 80]\n- [‡πÄ‡∏•‡∏Ç]  ([‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏î‡∏≤‡∏ß‡∏à‡∏£])\n- [‡πÄ‡∏•‡∏Ç]  ([‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏î‡∏≤‡∏ß‡∏à‡∏£])\n**‡∏Ñ‡πç‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡πç‡∏≤** : [‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;\n\n// Generate user prompt based on category\nconst categoryPrompts = {\n  lottery: `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${data.additionalData.date} ${data.additionalData.time}`,\n  love: `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏û‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ó‡πâ`,\n  business: `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô`,\n  relocation: `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á`\n};\n\nconst userPrompt = `${categoryPrompts[category]}\n\n**Birth Chart Data:**\n- ‡πÄ‡∏û‡∏®: ${birthChart.birthData.gender}\n- ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: ${birthChart.birthData.birthDate}\n- ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î: ${birthChart.birthData.birthTime}\n- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î: ${birthChart.birthData.location}\n\n**Current Transits:**\n${aspects.map(aspect => `- ${aspect.transit} ${aspect.aspect} ${aspect.natal} (${aspect.angle.toFixed(1)}¬∞)`).join('\\n')}\n\n**Lucky Score:** ${luckyScore}/100\n\n**Additional Data:**\n${JSON.stringify(data.additionalData, null, 2)}`;\n\nreturn {\n  userId: userId,\n  systemPrompt: systemPrompt,\n  userPrompt: userPrompt,\n  category: category,\n  luckyScore: luckyScore,\n  aspects: aspects\n};"
      },
      "id": "generate-ai-prompt",
      "name": "Generate AI Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 460]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "nodeCredentialType": "openAiApi",
        "requestMethod": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.openAiApi.apiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4o-mini"
            },
            {
              "name": "messages",
              "value": "={{ [{\"role\": \"system\", \"content\": $json.systemPrompt}, {\"role\": \"user\", \"content\": $json.userPrompt}] }}"
            },
            {
              "name": "max_tokens",
              "value": 1000
            },
            {
              "name": "temperature",
              "value": 0.7
            }
          ]
        },
        "options": {}
      },
      "id": "call-openai",
      "name": "Call OpenAI API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2000, 460]
    },
    {
      "parameters": {
        "jsCode": "// Process AI response and save to cache\nconst inputData = $input.first().json;\nconst aiResponse = inputData.choices[0].message.content;\n\nconst userId = inputData.userId;\nconst category = inputData.category;\n\n// Save fortune to cache\nconst fs = require('fs');\nconst path = require('path');\n\nconst fortunePath = path.join(__dirname, '../data/fortunes.json');\nlet fortuneData = {};\n\ntry {\n  if (fs.existsSync(fortunePath)) {\n    const cachedData = fs.readFileSync(fortunePath, 'utf8');\n    fortuneData = JSON.parse(cachedData);\n  }\n} catch (error) {\n  console.error('Error reading fortune cache:', error);\n}\n\nconst cacheKey = `${userId}_${category}`;\nfortuneData[cacheKey] = {\n  userId: userId,\n  category: category,\n  fortune: aiResponse,\n  createdAt: new Date().toISOString()\n};\n\ntry {\n  fs.writeFileSync(fortunePath, JSON.stringify(fortuneData, null, 2));\n} catch (error) {\n  console.error('Error saving fortune cache:', error);\n}\n\nreturn {\n  userId: userId,\n  category: category,\n  fortune: aiResponse,\n  messageType: 'ai_fortune_response'\n};"
      },
      "id": "process-ai-response",
      "name": "Process AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2220, 460]
    },
    {
      "parameters": {
        "jsCode": "// Use cached fortune\nconst data = $input.first().json;\nconst cachedFortune = data.cachedFortune;\n\nreturn {\n  userId: data.userId,\n  category: cachedFortune.category,\n  fortune: cachedFortune.fortune,\n  messageType: 'cached_fortune_response',\n  isCached: true\n};"
      },
      "id": "use-cached-fortune",
      "name": "Use Cached Fortune",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "nodeCredentialType": "lineApi",
        "requestMethod": "POST",
        "url": "https://api.line.me/v2/bot/message/reply",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.lineApi.channelAccessToken }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "replyToken",
              "value": "={{ $('LINE Webhook').first().json.events[0].replyToken }}"
            },
            {
              "name": "messages",
              "value": "={{ [$json.message] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "reply-to-line",
      "name": "Reply to LINE",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2440, 300]
    },
    {
      "parameters": {
        "jsCode": "// Format fortune response for LINE\nconst data = $input.first().json;\nconst fortune = data.fortune;\nconst userId = data.userId;\nconst category = data.category;\n\n// Create fortune message\nconst fortuneMessage = {\n  type: 'text',\n  text: fortune\n};\n\n// Add footer buttons\nconst footerMessage = {\n  type: 'flex',\n  altText: 'üîÆ ‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ',\n  contents: {\n    type: 'bubble',\n    body: {\n      type: 'box',\n      layout: 'vertical',\n      contents: [\n        {\n          type: 'text',\n          text: 'üîÆ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏°?',\n          weight: 'bold',\n          size: 'md',\n          color: '#1DB446'\n        }\n      ]\n    },\n    footer: {\n      type: 'box',\n      layout: 'vertical',\n      contents: [\n        {\n          type: 'button',\n          action: {\n            type: 'message',\n            label: 'üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà',\n            text: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà'\n          },\n          style: 'primary',\n          color: '#1DB446'\n        },\n        {\n          type: 'button',\n          action: {\n            type: 'message',\n            label: 'üìù ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î',\n            text: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î'\n          },\n          style: 'secondary',\n          margin: 'sm'\n        }\n      ]\n    }\n  }\n};\n\nreturn {\n  userId: userId,\n  messages: [fortuneMessage, footerMessage],\n  messageType: 'fortune_complete'\n};"
      },
      "id": "format-fortune-response",
      "name": "Format Fortune Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "OK"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2660, 300]
    }
  ],
  "pinData": {},
  "connections": {
    "LINE Webhook": {
      "main": [
        [
          {
            "node": "Message Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Router": {
      "main": [
        [
          {
            "node": "Check Birth Data Cache",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Birth Data Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Birth Data Check": {
      "main": [
        [
          {
            "node": "Generate Birth Chart",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Category Selection Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Category Selection Check": {
      "main": [
        [
          {
            "node": "Handle Category Selection",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Additional Data Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Additional Data Check": {
      "main": [
        [
          {
            "node": "Calculate Transits & Lucky Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Birth Data Cache": {
      "main": [
        [
          {
            "node": "Birth Data Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Birth Data Exists?": {
      "main": [
        [
          {
            "node": "Generate Category Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Welcome Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Welcome Message": {
      "main": [
        [
          {
            "node": "Reply to LINE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Category Menu": {
      "main": [
        [
          {
            "node": "Reply to LINE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Birth Chart": {
      "main": [
        [
          {
            "node": "Generate Category Menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Category Selection": {
      "main": [
        [
          {
            "node": "Reply to LINE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Transits & Lucky Score": {
      "main": [
        [
          {
            "node": "Check Fortune Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Fortune Cache": {
      "main": [
        [
          {
            "node": "Use Cache or Call AI?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Use Cache or Call AI?": {
      "main": [
        [
          {
            "node": "Use Cached Fortune",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate AI Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Prompt": {
      "main": [
        [
          {
            "node": "Call OpenAI API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call OpenAI API": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Response": {
      "main": [
        [
          {
            "node": "Format Fortune Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Use Cached Fortune": {
      "main": [
        [
          {
            "node": "Format Fortune Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Fortune Response": {
      "main": [
        [
          {
            "node": "Reply to LINE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply to LINE": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "luckseeker-instance"
  },
  "id": "luckseeker-workflow",
  "tags": ["LINE", "AI", "Fortune", "Astrology", "Thai"]
}