const line = require('@line/bot-sdk');
const axios = require('axios');
const config = require('../config');
const fortuneService = require('../services/fortuneService');
const birthChartService = require('../services/birthChartService');
const database = require('../services/database');

const lineConfig = {
  channelAccessToken: config.line.channelAccessToken,
  channelSecret: config.line.channelSecret
};

const client = new line.Client(lineConfig);

// Simple mutex to prevent duplicate requests
const processingUsers = new Set();

// Helper function to show loading animation using direct API call
async function showLoadingAnimation(userId, loadingSeconds = 10) {
  try {
    return await axios({
      method: "post",
      url: "https://api.line.me/v2/bot/chat/loading/start",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${config.line.channelAccessToken}`
      },
      data: { 
        chatId: userId,
        loadingSeconds: loadingSeconds
      }
    });
  } catch (error) {
    console.error('Loading animation API error:', error.response?.data || error.message);
    throw error;
  }
}

// Helper function to parse fortune result and extract key information
function parseFortuneResult(fortuneText) {
  const parsed = {
    timestamp: new Date().toLocaleDateString('th-TH') + ' ' + new Date().toLocaleTimeString('th-TH'),
    luckyScore: null,
    luckyScoreStatus: '',
    luckyScoreColor: '#999999',
    planets: '',
    luckyNumbers: {
      twoDigit: null,
      threeDigit: null
    },
    advice: ''
  };

  console.log("fortuneText+++",fortuneText)

  try {
    // Extract timestamp
    const timeMatch = fortuneText.match(/\*\*‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤\*\*\s*:\s*(.+)/);
    if (timeMatch) {
      parsed.timestamp = timeMatch[1].trim();
    }

    // Extract Lucky Score
    const scoreMatch = fortuneText.match(/\*\*Lucky-Score\*\*\s*:\s*(\d+)\s*\/\s*100/);

    console.log("scoreMatch+++",scoreMatch)

    if (scoreMatch) {
      parsed.luckyScore = parseInt(scoreMatch[1]);
      if (parsed.luckyScore >= 80) {
        parsed.luckyScoreStatus = '‚úÖ ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÄ‡∏Å‡∏ì‡∏ë‡πå';
        parsed.luckyScoreColor = '#4CAF50';
      } else if (parsed.luckyScore >= 60) {
        parsed.luckyScoreStatus = '‚ö†Ô∏è ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
        parsed.luckyScoreColor = '#FFA500';
      } else {
        parsed.luckyScoreStatus = '‚ùå ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå';
        parsed.luckyScoreColor = '#FF6B6B';
      }
    }

    // Extract planets/aspects
    const planetsMatch = fortuneText.match(/\*\*‡∏î‡∏≤‡∏ß‡∏à‡∏£‡πÄ‡∏î‡πà‡∏ô\*\*\s*:\s*(.+?)(?=\*\*|$)/s);
    if (planetsMatch) {
      parsed.planets = planetsMatch[1].trim().replace(/\n/g, ' ');
    }

    // Extract lucky numbers - try different patterns
    const luckyNumbersMatch = fortuneText.match(/\*\*‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î\*\*\s*:\s*([\s\S]*?)(?=\*\*|$)/);
    if (luckyNumbersMatch) {
      const numbersText = luckyNumbersMatch[1];
      
      // Extract 2-digit numbers
      const twoDigitMatches = numbersText.match(/(\d{2})/g);
      if (twoDigitMatches && twoDigitMatches.length > 0) {
        parsed.luckyNumbers.twoDigit = twoDigitMatches[0];
      }
      
      // Extract 3-digit numbers
      const threeDigitMatches = numbersText.match(/(\d{3})/g);
      if (threeDigitMatches && threeDigitMatches.length > 0) {
        parsed.luckyNumbers.threeDigit = threeDigitMatches[0];
      }
    }

    // Extract advice
    const adviceMatch = fortuneText.match(/\*\*‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥\*\*\s*:\s*([\s\S]+?)(?:‚îÄ‚îÄ‚îÄ‚îÄ|$)/);
    if (adviceMatch) {
      parsed.advice = adviceMatch[1].trim().replace(/\n/g, ' ');
    }

    // Log the parsed result for debugging
    console.log('Parsed fortune result:', {
      luckyScore: parsed.luckyScore,
      planets: parsed.planets.substring(0, 100) + '...',
      hasLuckyNumbers: !!(parsed.luckyNumbers.twoDigit || parsed.luckyNumbers.threeDigit),
      hasAdvice: !!parsed.advice
    });

  } catch (error) {
    console.warn('Error parsing fortune result:', error);
    // Keep the empty default values if parsing fails
  }

  return parsed;
}

// Helper function to create rich message template
function createFortuneRichMessage(fortuneText, category) {
  const parsed = parseFortuneResult(fortuneText);
  
  // Create a minimized flex message to avoid LINE API 400 errors
  const richMessage = {
    type: "flex",
    altText: `Lucky Score: ${parsed.luckyScore}/100`,
    contents: {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: `üéØ Lucky Score: ${parsed.luckyScore}/100`,
            weight: "bold",
            size: "lg",
            color: parsed.luckyScoreColor
          },
          {
            type: "text",
            text: parsed.luckyScoreStatus,
            size: "sm",
            color: parsed.luckyScoreColor,
            margin: "sm"
          }
        ]
      }
    }
  };

  // Add only essential content to keep message small
  const bodyContents = richMessage.contents.body.contents;

  // Add planets info (shortened)
  if (parsed.planets && parsed.planets !== '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏î‡∏≤‡∏ß‡∏à‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î‡πÉ‡∏ô‡∏≠‡∏á‡∏®‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ö‡∏ß‡∏Å') {
    bodyContents.push(
      { type: "separator", margin: "md" },
      {
        type: "text",
        text: "‚≠ê ‡∏î‡∏≤‡∏ß‡∏à‡∏£‡πÄ‡∏î‡πà‡∏ô",
        weight: "bold",
        margin: "md",
        size: "sm"
      },
      {
        type: "text",
        text: parsed.planets.substring(0, 50) + (parsed.planets.length > 50 ? "..." : ""),
        wrap: true,
        size: "xs",
        margin: "sm"
      }
    );
  }

  // Add lucky numbers if available
  if (parsed.luckyNumbers.twoDigit || parsed.luckyNumbers.threeDigit) {
    let numbersText = "";
    if (parsed.luckyNumbers.twoDigit) {
      numbersText = `üé≤ ${parsed.luckyNumbers.twoDigit}`;
    }
    if (parsed.luckyNumbers.threeDigit) {
      numbersText += numbersText ? `, ${parsed.luckyNumbers.threeDigit}` : `üé≤ ${parsed.luckyNumbers.threeDigit}`;
    }
    
    bodyContents.push(
      { type: "separator", margin: "md" },
      {
        type: "text",
        text: numbersText,
        size: "md",
        color: "#4CAF50",
        weight: "bold",
        margin: "md"
      }
    );
  }

  // Add shortened advice
  if (parsed.advice) {
    bodyContents.push(
      { type: "separator", margin: "md" },
      {
        type: "text",
        text: parsed.advice.substring(0, 80) + (parsed.advice.length > 80 ? "..." : ""),
        wrap: true,
        size: "xs",
        margin: "md"
      }
    );
  }

  // Add simple button
  bodyContents.push(
    { type: "separator", margin: "md" },
    {
      type: "button",
      action: {
        type: "postback",
        label: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà",
        data: "action=analyze_again"
      },
      style: "primary",
      margin: "md"
    }
  );

  return richMessage;
}

async function handleEvent(event) {
  try {
    console.log('Handling event:', {
      type: event.type,
      replyToken: event.replyToken,
      userId: event.source?.userId,
      messageType: event.message?.type,
      messageText: event.message?.text?.substring(0, 100)
    });

    // Handle postback events from rich message buttons
    if (event.type === 'postback') {
      return handlePostback(event);
    }

    if (event.type !== 'message' || event.message.type !== 'text') {
      return Promise.resolve(null);
    }

    // Validate replyToken exists
    if (!event.replyToken) {
      console.error('No replyToken found in event');
      return Promise.resolve(null);
    }

    const userId = event.source.userId;
    const message = event.message.text.trim();

    if (message === '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô' || message === '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà' || message.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || message.includes('hello') || message.includes('‡πÑ‡∏á')) {
      return handleGreeting(event);
    }

    if (message.startsWith('birth:')) {
      return handleBirthChart(event, message);
    }

    // Handle additional data inputs for fortune categories
    if (message.startsWith('business:') || message.startsWith('love:') || message.startsWith('relocation:') || message.startsWith('lottery:') || message.startsWith('partner:')) {
      return handleAdditionalData(event, message);
    }

    // Handle admin commands for quota management
    if (message.startsWith('admin:addquota:')) {
      return handleAdminAddQuota(event, message);
    }

    if (message === 'admin:quotastatus' || message === 'quota') {
      return handleQuotaStatus(event);
    }

    // Handle text commands for menu actions
    if (message === '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î') {
      return handleTextCommand(event, 'input_birth_data');
    }
    
    if (message === '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢') {
      return handleTextCommand(event, 'fortune', '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢');
    }
    
    if (message === '‡∏û‡∏ö‡∏£‡∏±‡∏Å') {
      return handleTextCommand(event, 'fortune', '‡∏û‡∏ö‡∏£‡∏±‡∏Å');
    }
    
    if (message === '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à') {
      return handleTextCommand(event, 'fortune', '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à');
    }
    
    if (message === '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô') {
      return handleTextCommand(event, 'fortune', '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô');
    }
    
    if (message === '‡∏•‡∏ö' || message === '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•') {
      return handleTextCommand(event, 'delete_all_data');
    }

    return handleGeneralMessage(event);
  } catch (error) {
    console.error('Error handling event:', {
      error: error.message,
      stack: error.stack,
      event: event
    });
    
    // Try to send error message if replyToken exists
    if (event.replyToken) {
      try {
        return await client.replyMessage(event.replyToken, {
          type: 'text',
          text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
        });
      } catch (replyError) {
        console.error('Failed to send error message:', replyError);
      }
    }
    
    return Promise.resolve(null);
  }
}

async function handleGreeting(event) {
  const userId = event.source.userId;
  
  // Check if this is a first-time user
  const isFirstTime = await database.isFirstTimeUser(userId);
  
  if (isFirstTime) {
    // Mark user as visited and send welcome message
    await database.markUserAsVisited(userId);
    return sendWelcomeMessage(event);
  }
  
  const cachedBirthData = await database.getBirthData(userId);
  
  // Check if user has cached birth data
  if (cachedBirthData) {
    const savedDate = new Date(cachedBirthData.timestamp).toLocaleDateString('th-TH');
    
    const flexMessage = {
      type: 'flex',
      altText: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ Seeker',
      contents: {
        type: 'bubble',
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ Seeker ‚ú®',
              weight: 'bold',
              size: 'xl',
              color: '#7B68EE'
            },
            {
              type: 'text',
              text: '‡∏â‡∏±‡∏ô‡∏à‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞',
              size: 'md',
              margin: 'md'
            },
            {
              type: 'text',
              text: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${savedDate}`,
              size: 'sm',
              margin: 'sm',
              color: '#999999'
            },
            {
              type: 'separator',
              margin: 'md'
            },
            {
              type: 'text',
              text: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞',
              size: 'md',
              margin: 'md',
              weight: 'bold'
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üé∞ ‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢',
                data: 'action=select_category&category=‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢'
              },
              style: 'primary'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üíï ‡∏û‡∏ö‡∏£‡∏±‡∏Å',
                data: 'action=select_category&category=‡∏û‡∏ö‡∏£‡∏±‡∏Å'
              },
              style: 'primary'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üíº ‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
                data: 'action=select_category&category=‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à'
              },
              style: 'primary'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üîÑ ‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
                data: 'action=select_category&category=‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'
              },
              style: 'primary'
            },
            {
              type: 'separator',
              margin: 'md'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                data: 'action=delete_all_data'
              },
              style: 'secondary',
              color: '#FF6B6B'
            }
          ]
        }
      }
    };

    return client.replyMessage(event.replyToken, flexMessage);
  } else {
    // Original greeting for new users
    const flexMessage = {
      type: 'flex',
      altText: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ Seeker',
      contents: {
        type: 'bubble',
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ Seeker ‚ú®',
              weight: 'bold',
              size: 'xl',
              color: '#7B68EE'
            },
            {
              type: 'text',
              text: '‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ ‡∏ô‡πâ‡∏≠‡∏á‡∏•‡∏±‡∏Å‡∏Å‡∏µ‡πâ ‚Äì ‡∏´‡∏°‡∏≠‡∏î‡∏π‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏≤‡∏Å‡∏•',
              size: 'md',
              margin: 'md'
            },
            {
              type: 'text',
              text: '‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†" ‡πÅ‡∏•‡∏∞ "‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î" ‡∏à‡∏≤‡∏Å‡∏î‡∏ß‡∏á‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î',
              size: 'sm',
              margin: 'sm',
              wrap: true
            },
            {
              type: 'separator',
              margin: 'md'
            },
            {
              type: 'text',
              text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
              size: 'md',
              margin: 'md',
              weight: 'bold'
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'button',
              action: {
                type: 'uri',
                label: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î',
                uri: `https://miniapp.line.me/${config.line.liffId}`
              },
              style: 'primary',
              color: '#7B68EE'
            }
          ]
        }
      }
    };

    return client.replyMessage(event.replyToken, flexMessage);
  }
}

async function handleBirthChart(event, message) {
  try {
    const data = JSON.parse(message.replace('birth:', ''));
    const { birthdate, birthtime, latitude, longitude, gender } = data;

    // Validate required fields
    if (!birthdate || !birthtime || latitude === undefined || longitude === undefined) {
      console.error('Missing required birth chart data:', { birthdate, birthtime, latitude, longitude });
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
      });
    }

    const birthChart = await birthChartService.generateBirthChart({
      birthdate,
      birthtime,
      latitude,
      longitude
    });

    console.log("birthChart++",birthChart)

    const fortuneCategories = {
      type: 'flex',
      altText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†',
      contents: {
        type: 'bubble',
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‡πÑ‡∏î‡πâ Birth Chart ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞! üåü',
              weight: 'bold',
              size: 'lg'
            },
            {
              type: 'text',
              text: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ñ‡πà‡∏∞',
              margin: 'md'
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üé∞ ‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢',
                data: 'action=select_category&category=‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢'
              },
              style: 'primary'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üíï ‡∏û‡∏ö‡∏£‡∏±‡∏Å',
                data: 'action=select_category&category=‡∏û‡∏ö‡∏£‡∏±‡∏Å'
              },
              style: 'primary'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üíº ‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
                data: 'action=select_category&category=‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à'
              },
              style: 'primary'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üîÑ ‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
                data: 'action=select_category&category=‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'
              },
              style: 'primary'
            }
          ]
        }
      }
    };

    // Save both birth chart and original birth data to database
    const userId = event.source.userId;
    
    await database.setBirthChart(userId, birthChart);
    await database.setBirthData(userId, {
      birthdate,
      birthtime,
      latitude,
      longitude,
      gender
    });

    return client.replyMessage(event.replyToken, fortuneCategories);
  } catch (error) {
    console.error('Error processing birth chart:', error);
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Birth Chart ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
    });
  }
}

async function handleFortuneCategory(event, category) {
  const userId = event.source.userId;
  const birthChart = await database.getBirthChart(userId);

  if (!birthChart) {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞ 2'
    });
  }

  // Always redirect to input page for additional data - users need to re-input each time
  if (category === '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à') {
    return redirectToInputPage(event, '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à');
  } else if (category === '‡∏û‡∏ö‡∏£‡∏±‡∏Å') {
    return redirectToInputPage(event, '‡∏û‡∏ö‡∏£‡∏±‡∏Å');
  } else if (category === '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô') {
    return redirectToInputPage(event, '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô');
  } else if (category === '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢') {
    return redirectToInputPage(event, '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢');
  }

  try {
    // Show loading animation while processing AI request
    try {
      await showLoadingAnimation(userId, 8);
    } catch (loadingError) {
      console.warn('Failed to show loading animation:', loadingError);
      // Continue without loading animation if it fails
    }

    // Prepare additional data for fortune calculation
    const additionalData = await database.getAllAdditionalData(userId);

    let fortuneResult = await fortuneService.getFortune(birthChart, category, additionalData, 'chatgpt', userId);

    console.log("fortuneResult",fortuneResult)
    
    // Add quota information to the result
    if (userId) {
      const userQuota = await database.getUserQuota(userId);
      const quotaInfo = `\n\nüìä **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**\nüî¢ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${userQuota.remainingQueries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüìà ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: ${userQuota.usedQueries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüíØ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${userQuota.totalQueries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
      fortuneResult += quotaInfo;
    }
    
    // Return plain text instead of flex message
    try {
      console.log('Attempting to send message:', {
        replyToken: event.replyToken,
        textLength: fortuneResult?.length || 0,
        textPreview: fortuneResult?.substring(0, 100) + '...'
      });
      
      // Validate and sanitize the message
      let messageText = fortuneResult;
      
      // Check if message is too long (LINE limit is 5000 characters)
      if (messageText && messageText.length > 5000) {
        messageText = messageText.substring(0, 4900) + '...\n\n(‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î)';
      }
      
      // Check if message is empty or null
      if (!messageText || messageText.trim() === '') {
        messageText = '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞';
      }
      
      return await client.replyMessage(event.replyToken, {
        type: 'text',
        text: messageText
      });
    } catch (lineError) {
      console.error('LINE API Error:', {
        error: lineError.message,
        statusCode: lineError.statusCode,
        originalError: lineError.originalError?.response?.data || lineError.originalError
      });
      
      // Try sending a simple fallback message
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
      });
    }
  } catch (error) {
    console.error('Error getting fortune:', error);
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
    });
  }
}

async function processFortuneCalculation(event, category) {
  const userId = event.source.userId;
  
  // Prevent duplicate requests
  if (processingUsers.has(userId)) {
    console.log(`User ${userId} is already being processed, ignoring duplicate request`);
    return;
  }
  
  processingUsers.add(userId);
  
  try {
    let birthChart = await database.getBirthChart(userId);
    const birthData = await database.getBirthData(userId);

    // If no birth data, ask user to input
    if (!birthData) {
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞'
      });
    }

    // If birth data exists but no birth chart, regenerate it
    if (!birthChart && birthData) {
      console.log(`Regenerating birth chart for user ${userId}`);
      try {
        birthChart = await birthChartService.calculateBirthChart(birthData);
        await database.saveBirthChart(userId, birthChart);
      } catch (error) {
        console.error('Error regenerating birth chart:', error);
        return client.replyMessage(event.replyToken, {
          type: 'text',
          text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏ß‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
        });
      }
    }

    if (!birthChart) {
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞'
      });
    }

    // Show loading animation while processing AI request
    try {
      await showLoadingAnimation(userId, 8);
    } catch (loadingError) {
      console.warn('Failed to show loading animation:', loadingError);
      // Continue without loading animation if it fails
    }

    // Prepare additional data for fortune calculation
    const additionalData = await database.getAllAdditionalData(userId);

    // Generate cache key
    const cacheKey = database.generateCacheKey(userId, category, birthChart, additionalData);
    
    // Check if we have cached result
    const cachedResult = await database.getFortuneCache(cacheKey);
    
    let fortuneResult;
    let isCached = false;
    
    if (cachedResult) {
      // Use cached result
      fortuneResult = cachedResult.result;
      isCached = true;
      console.log("Using cached fortune result for", category);
      
      // Add cache info to result
      const analysisInfo = cachedResult.analysisDateTime;
      const cacheNote = `\n\nüìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏ß‡∏á${analysisInfo.type} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${analysisInfo.date}${analysisInfo.time !== '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏' ? ` ‡πÄ‡∏ß‡∏•‡∏≤ ${analysisInfo.time}` : ''}\n(‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô)`;
      fortuneResult += cacheNote;
    } else {
      // Get new result from AI
      fortuneResult = await fortuneService.getFortune(birthChart, category, additionalData, 'chatgpt', userId);
      
      // Cache the result
      await database.setFortuneCache(cacheKey, fortuneResult, category, additionalData);
      console.log("Cached new fortune result for", category);
    }

    console.log("fortuneResult", fortuneResult);
    
    // Add quota information to the result
    if (!isCached && userId) {
      const userQuota = await database.getUserQuota(userId);
      const quotaInfo = `\n\nüìä **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**\nüî¢ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${userQuota.remainingQueries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüìà ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: ${userQuota.usedQueries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüíØ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${userQuota.totalQueries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
      fortuneResult += quotaInfo;
    }
    
    // Return plain text instead of flex message
    try {
      console.log('Attempting to send message:', {
        replyToken: event.replyToken,
        textLength: fortuneResult?.length || 0,
        textPreview: fortuneResult?.substring(0, 100) + '...'
      });
      
      // Validate and sanitize the message
      let messageText = fortuneResult;
      
      // Check if message is too long (LINE limit is 5000 characters)
      if (messageText && messageText.length > 5000) {
        messageText = messageText.substring(0, 4900) + '...\n\n(‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î)';
      }
      
      // Check if message is empty or null
      if (!messageText || messageText.trim() === '') {
        messageText = '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞';
      }
      
      return await client.replyMessage(event.replyToken, {
        type: 'text',
        text: messageText
      });
    } catch (lineError) {
      console.error('LINE API Error:', {
        error: lineError.message,
        statusCode: lineError.statusCode,
        originalError: lineError.originalError?.response?.data || lineError.originalError
      });
      
      // Try sending a simple fallback message
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
      });
    }
  } catch (error) {
    console.error('Error getting fortune:', error);
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
    });
  } finally {
    // Always remove user from processing set
    processingUsers.delete(userId);
  }
}

async function handlePostback(event) {
  const data = event.postback.data;
  
  // Handle category selection postbacks
  if (data.startsWith('action=select_category')) {
    const params = new URLSearchParams(data);
    const action = params.get('action');
    const category = params.get('category');
    
    if (action === 'select_category' && category) {
      const userId = event.source.userId;
      // Check if user has cached birth data
      const cachedBirthChart = await database.getBirthChart(userId);
      const cachedBirthData = await database.getBirthData(userId);
      
      if (cachedBirthChart && cachedBirthData) {
        console.log(`Using cached birth data for user ${userId}, saved at ${cachedBirthData.timestamp}`);
        return handleFortuneCategory(event, category);
      } else {
        return client.replyMessage(event.replyToken, {
          type: 'text',
          text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞'
        });
      }
    }
  }

  // Handle fortune analysis postbacks
  if (data.startsWith('action=analyze_')) {
    const params = new URLSearchParams(data);
    const action = params.get('action');
    const category = params.get('category');
    
    if (action && category) {
      // Map actions to categories for fortune analysis
      const actionMap = {
        'analyze_lottery': '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢',
        'analyze_love': '‡∏û‡∏ö‡∏£‡∏±‡∏Å',
        'analyze_business': '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
        'analyze_relocation': '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'
      };
      
      if (actionMap[action] === category) {
        // Call fortune calculation directly instead of handleFortuneCategory
        return processFortuneCalculation(event, category);
      }
    }
  }
  
  if (data === 'action=analyze_again') {
    // Show fortune categories again
    const fortuneCategories = {
      type: 'flex',
      altText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†',
      contents: {
        type: 'bubble',
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞ üåü',
              weight: 'bold',
              size: 'lg'
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üé∞ ‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢',
                data: 'action=select_category&category=‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢'
              },
              style: 'primary'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üíï ‡∏û‡∏ö‡∏£‡∏±‡∏Å',
                data: 'action=select_category&category=‡∏û‡∏ö‡∏£‡∏±‡∏Å'
              },
              style: 'primary'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üíº ‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
                data: 'action=select_category&category=‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à'
              },
              style: 'primary'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üîÑ ‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
                data: 'action=select_category&category=‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'
              },
              style: 'primary'
            }
          ]
        }
      }
    };

    return client.replyMessage(event.replyToken, fortuneCategories);
  }
  
  if (data === 'action=delete_all_data') {
    const userId = event.source.userId;
    
    // Show confirmation message
    const confirmMessage = {
      type: 'flex',
      altText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      contents: {
        type: 'bubble',
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
              weight: 'bold',
              size: 'lg',
              color: '#FF6B6B'
            },
            {
              type: 'text',
              text: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
              size: 'md',
              margin: 'md',
              wrap: true
            },
            {
              type: 'text',
              text: '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î\n‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Birth Chart\n‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
              size: 'sm',
              margin: 'md',
              color: '#666666'
            },
            {
              type: 'text',
              text: '‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ',
              size: 'sm',
              margin: 'md',
              color: '#FF6B6B',
              weight: 'bold'
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'postback',
                label: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                data: 'action=cancel_delete'
              },
              style: 'secondary'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üóëÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                data: 'action=confirm_delete_all'
              },
              style: 'primary',
              color: '#FF6B6B'
            }
          ]
        }
      }
    };
    
    return client.replyMessage(event.replyToken, confirmMessage);
  }
  
  if (data === 'action=cancel_delete') {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‚úÖ'
    });
  }
  
  if (data === 'action=confirm_delete_all') {
    const userId = event.source.userId;
    
    try {
      // Delete all user data
      await database.deleteBirthData(userId);
      await database.deleteBirthChart(userId);
      
      // Delete all additional data types
      await database.deleteAdditionalData(userId, 'lottery');
      await database.deleteAdditionalData(userId, 'business');
      await database.deleteAdditionalData(userId, 'partner');
      await database.deleteAdditionalData(userId, 'relocation');
      
      // Delete fortune cache (we need to add this method)
      await database.deleteUserFortuneCache(userId);
      
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞'
      });
    } catch (error) {
      console.error('Error deleting user data:', error);
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
      });
    }
  }
  
  if (data === 'action=view_history') {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: 'üìä ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè'
    });
  }
  
  if (data === 'action=share_location') {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏∞'
    });
  }

  // Handle text command simulated postbacks
  const params = new URLSearchParams(data);
  const action = params.get('action');
  const category = params.get('category');

  if (action === 'fortune' && category) {
    // Handle fortune request from text commands
    const userId = event.source.userId;
    let cachedBirthChart = await database.getBirthChart(userId);
    const cachedBirthData = await database.getBirthData(userId);
    
    // If no birth data, ask user to input
    if (!cachedBirthData) {
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞'
      });
    }

    // If birth data exists but no birth chart, regenerate it
    if (!cachedBirthChart && cachedBirthData) {
      console.log(`Regenerating birth chart for user ${userId} from text command`);
      try {
        cachedBirthChart = await birthChartService.calculateBirthChart(cachedBirthData);
        await database.saveBirthChart(userId, cachedBirthChart);
      } catch (error) {
        console.error('Error regenerating birth chart:', error);
        return client.replyMessage(event.replyToken, {
          type: 'text',
          text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏ß‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
        });
      }
    }
    
    if (cachedBirthChart && cachedBirthData) {
      console.log(`Using cached birth data for user ${userId} for category ${category}`);
      return handleFortuneCategory(event, category);
    } else {
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞'
      });
    }
  }

  if (action === 'input_birth_data') {
    // Handle birth data input request
    const flexMessage = {
      type: 'flex',
      altText: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î',
      contents: {
        type: 'bubble',
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: 'üìÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î',
              weight: 'bold',
              size: 'lg',
              color: '#7B68EE'
            },
            {
              type: 'text',
              text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
              size: 'sm',
              wrap: true,
              margin: 'md'
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'button',
              action: {
                type: 'uri',
                label: 'üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î',
                uri: `https://liff.line.me/${config.line.liffId}`
              },
              style: 'primary',
              color: '#7B68EE'
            }
          ]
        }
      }
    };

    return client.replyMessage(event.replyToken, flexMessage);
  }

  // Default response for unknown postback
  return client.replyMessage(event.replyToken, {
    type: 'text',
    text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
  });
}

async function redirectToInputPage(event, category) {
  const categoryMap = {
    '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢': { emoji: 'üé∞', text: '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢' },
    '‡∏û‡∏ö‡∏£‡∏±‡∏Å': { emoji: 'üíï', text: '‡∏û‡∏ö‡∏£‡∏±‡∏Å' },
    '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à': { emoji: 'üíº', text: '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à' },
    '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô': { emoji: 'üîÑ', text: '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô' }
  };

  const categoryInfo = categoryMap[category] || { emoji: '‚ú®', text: category };

  const flexMessage = {
    type: 'flex',
    altText: `‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${categoryInfo.text}`,
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: `${categoryInfo.emoji} ${categoryInfo.text}`,
            weight: 'bold',
            size: 'xl',
            color: '#7B68EE'
          },
          {
            type: 'text',
            text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô',
            size: 'md',
            margin: 'md',
            wrap: true
          },
          {
            type: 'separator',
            margin: 'md'
          },
          {
            type: 'text',
            text: '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            size: 'sm',
            margin: 'md',
            color: '#666666'
          }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            action: {
              type: 'uri',
              label: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
              uri: `https://miniapp.line.me/${config.line.liffId}/input.html?category=${encodeURIComponent(category)}`
            },
            style: 'primary',
            color: '#7B68EE'
          }
        ]
      }
    }
  };

  return client.replyMessage(event.replyToken, flexMessage);
}

async function handleGeneralMessage(event) {
  try {
    console.log('Sending general message to user:', event.source.userId);
    return await client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞'
    });
  } catch (error) {
    console.error('Error sending general message:', {
      error: error.message,
      statusCode: error.statusCode,
      originalError: error.originalError?.response?.data
    });
    throw error;
  }
}

const webhookHandler = (req, res) => {
  // Validate request body
  if (!req.body || !req.body.events || !Array.isArray(req.body.events)) {
    console.log('Invalid webhook request body:', req.body);
    return res.status(400).json({ error: 'Invalid request body' });
  }

  // Handle LINE webhook verification
  if (req.body.events.length === 0) {
    return res.status(200).json({ message: 'Webhook verification successful' });
  }

  Promise
    .all(req.body.events.map(handleEvent))
    .then((result) => {
      console.log('Webhook handled successfully:', result);
      res.json(result);
    })
    .catch((err) => {
      console.error('Error handling webhook events:', {
        error: err.message,
        stack: err.stack,
        events: req.body.events
      });
      console.log("req.body.events", JSON.stringify(req.body.events, null, 2));
      res.status(500).json({ error: 'Internal server error' });
    });
};

// Functions to request additional data for different categories
async function requestBusinessData(event) {
  const flexMessage = {
    type: 'flex',
    altText: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üíº ‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
            weight: 'bold',
            size: 'xl',
            color: '#7B68EE'
          },
          {
            type: 'text',
            text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
            size: 'md',
            margin: 'md'
          },
          {
            type: 'text',
            text: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: business:‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà,‡πÄ‡∏ß‡∏•‡∏≤,‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
            size: 'sm',
            margin: 'sm',
            color: '#999999'
          },
          {
            type: 'text',
            text: '‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: business:15/07/2568,14:00,‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° A',
            size: 'sm',
            margin: 'sm',
            color: '#999999'
          }
        ]
      }
    }
  };
  
  return client.replyMessage(event.replyToken, flexMessage);
}

async function requestPartnerData(event) {
  const flexMessage = {
    type: 'flex',
    altText: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å',
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üíï ‡∏û‡∏ö‡∏£‡∏±‡∏Å',
            weight: 'bold',
            size: 'xl',
            color: '#7B68EE'
          },
          {
            type: 'text',
            text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å',
            size: 'md',
            margin: 'md'
          },
          {
            type: 'text',
            text: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: love:‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î,‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î',
            size: 'sm',
            margin: 'sm',
            color: '#999999'
          },
          {
            type: 'text',
            text: '‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: love:15/07/2540,14:30',
            size: 'sm',
            margin: 'sm',
            color: '#999999'
          }
        ]
      }
    }
  };
  
  return client.replyMessage(event.replyToken, flexMessage);
}

async function requestRelocationData(event) {
  const flexMessage = {
    type: 'flex',
    altText: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢',
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üîÑ ‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô/‡∏¢‡πâ‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô',
            weight: 'bold',
            size: 'xl',
            color: '#7B68EE'
          },
          {
            type: 'text',
            text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢',
            size: 'md',
            margin: 'md'
          },
          {
            type: 'text',
            text: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: relocation:‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà,‡πÄ‡∏ß‡∏•‡∏≤,‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
            size: 'sm',
            margin: 'sm',
            color: '#999999'
          },
          {
            type: 'text',
            text: '‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: relocation:15/07/2568,09:00,‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
            size: 'sm',
            margin: 'sm',
            color: '#999999'
          }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            action: {
              type: 'postback',
              label: '‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
              data: 'action=share_location'
            },
            style: 'secondary',
            margin: 'sm'
          }
        ]
      }
    }
  };
  
  return client.replyMessage(event.replyToken, flexMessage);
}

// Handle additional data inputs
async function handleAdditionalData(event, message) {
  const userId = event.source.userId;
  
  try {
    let category, data, responseText;
    
    if (message.startsWith('lottery:')) {
      category = '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢';
      data = JSON.parse(message.replace('lottery:', ''));
      
      await database.setAdditionalData(userId, 'lottery', data);
      
      responseText = '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†...';
      
    } else if (message.startsWith('business:')) {
      category = '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à';
      data = JSON.parse(message.replace('business:', ''));
      
      await database.setAdditionalData(userId, 'business', data);
      
      responseText = '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à...';
      
    } else if (message.startsWith('partner:')) {
      category = '‡∏û‡∏ö‡∏£‡∏±‡∏Å';
      data = JSON.parse(message.replace('partner:', ''));
      
      await database.setAdditionalData(userId, 'partner', data);
      
      responseText = '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å...';
      
    } else if (message.startsWith('relocation:')) {
      category = '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô';
      data = JSON.parse(message.replace('relocation:', ''));
      
      await database.setAdditionalData(userId, 'relocation', data);
      
      responseText = '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢...';
      
    } else if (message.startsWith('love:')) {
      // Legacy support for old format
      category = '‡∏û‡∏ö‡∏£‡∏±‡∏Å';
      const oldData = message.replace('love:', '').split(',');
      if (oldData.length >= 2) {
        await database.setAdditionalData(userId, 'partner', {
          birthdate: oldData[0].trim(),
          birthtime: oldData[1].trim()
        });
        responseText = '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å...';
      }
    }
    
    if (category && responseText) {
      // Create postback button for fortune analysis
      const categoryMap = {
        '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢': { emoji: 'üé∞', action: 'analyze_lottery' },
        '‡∏û‡∏ö‡∏£‡∏±‡∏Å': { emoji: 'üíï', action: 'analyze_love' },
        '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à': { emoji: 'üíº', action: 'analyze_business' },
        '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô': { emoji: 'üîÑ', action: 'analyze_relocation' }
      };

      const categoryInfo = categoryMap[category];

      const flexMessage = {
        type: 'flex',
        altText: `${responseText}`,
        contents: {
          type: 'bubble',
          body: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'text',
                text: responseText,
                weight: 'bold',
                size: 'md',
                color: '#7B68EE',
                wrap: true
              },
              {
                type: 'separator',
                margin: 'md'
              },
              {
                type: 'text',
                text: '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
                size: 'sm',
                margin: 'md',
                color: '#666666'
              }
            ]
          },
          footer: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'button',
                action: {
                  type: 'postback',
                  label: `${categoryInfo.emoji} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå${category}`,
                  data: `action=${categoryInfo.action}&category=${encodeURIComponent(category)}`
                },
                style: 'primary',
                color: '#7B68EE'
              }
            ]
          }
        }
      };

      return client.replyMessage(event.replyToken, flexMessage);
    }
    
    // If format is incorrect
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
    });
    
  } catch (error) {
    console.error('Error handling additional data:', error);
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
    });
  }
}

// Handle text commands that simulate postback actions
async function handleTextCommand(event, action, category = null) {
  // Create a synthetic postback event
  const postbackEvent = {
    ...event,
    type: 'postback',
    postback: {
      data: category ? `action=${action}&category=${encodeURIComponent(category)}` : `action=${action}`
    }
  };
  
  // Call the postback handler
  return handlePostback(postbackEvent);
}

// Send welcome message for first-time users
async function sendWelcomeMessage(event) {
  const flexMessage = {
    type: 'flex',
    altText: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà TuneHora - ‡∏à‡∏π‡∏ô‡πÇ‡∏´‡∏£‡∏≤ ‡∏à‡∏π‡∏ô‡∏î‡∏ß‡∏á ‡∏à‡∏π‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'TuneHora',
            weight: 'bold',
            size: 'xl',
            color: '#7B68EE',
            align: 'center'
          },
          {
            type: 'text',
            text: '‡∏à‡∏π‡∏ô‡πÇ‡∏´‡∏£‡∏≤ ‡∏à‡∏π‡∏ô‡∏î‡∏ß‡∏á ‡∏à‡∏π‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
            size: 'md',
            color: '#666666',
            align: 'center',
            margin: 'sm'
          }
        ],
        paddingBottom: 'md'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üåü ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö',
            weight: 'bold',
            size: 'lg',
            margin: 'md'
          },
          {
            type: 'text',
            text: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏î‡∏ß‡∏á 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ü‡∏£‡∏µ!',
            size: 'md',
            color: '#FF6B6B',
            weight: 'bold',
            margin: 'sm'
          },
          {
            type: 'separator',
            margin: 'md'
          },
          {
            type: 'text',
            text: '‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å',
            weight: 'bold',
            size: 'md',
            margin: 'md'
          },
          {
            type: 'text',
            text: '‚Ä¢ ‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏î‡∏µ\n‚Ä¢ LIFF App ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏™‡∏∞‡∏î‡∏ß‡∏Å\n‚Ä¢ ‡∏ú‡∏™‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏á\n‚Ä¢ Swiss Ephemeris ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥',
            size: 'sm',
            wrap: true,
            margin: 'sm'
          },
          {
            type: 'text',
            text: '‚úÖ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô',
            weight: 'bold',
            size: 'md',
            margin: 'md'
          },
          {
            type: 'text',
            text: '‚Ä¢ 4 ‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†: ‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢, ‡∏û‡∏ö‡∏£‡∏±‡∏Å, ‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à, ‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô\n‚Ä¢ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢\n‚Ä¢ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡∏à‡∏≤‡∏Å‡∏î‡∏≤‡∏ß‡∏à‡∏£‡∏¥‡∏á\n‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏ß‡∏á‡∏î‡∏µ (>80)',
            size: 'sm',
            wrap: true,
            margin: 'sm'
          }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            action: {
              type: 'uri',
              label: 'üåü ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡∏π‡∏î‡∏ß‡∏á',
              uri: `https://miniapp.line.me/${config.line.liffId}`
            },
            style: 'primary',
            color: '#7B68EE',
            margin: 'sm'
          },
          {
            type: 'text',
            text: '‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
            size: 'xs',
            color: '#999999',
            align: 'center',
            margin: 'sm'
          }
        ]
      }
    }
  };

  return client.replyMessage(event.replyToken, flexMessage);
}

// Admin function to add quota for users
async function handleAdminAddQuota(event, message) {
  const userId = event.source.userId;
  
  try {
    // Parse admin command: admin:addquota:targetUserId:amount
    const parts = message.split(':');
    if (parts.length < 3) {
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: admin:addquota:targetUserId:amount\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: admin:addquota:U123456:10'
      });
    }

    const targetUserId = parts[2];
    const amount = parseInt(parts[3]) || 10;

    if (!targetUserId) {
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ User ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° quota'
      });
    }

    // Add quota for target user
    const updatedQuota = await database.addUserQuota(targetUserId, amount);
    
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° quota ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nUser ID: ${targetUserId}\n‡πÄ‡∏û‡∏¥‡πà‡∏°: ${amount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${updatedQuota.remainingQueries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${updatedQuota.totalQueries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
    });

  } catch (error) {
    console.error('Error handling admin add quota:', error);
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° quota'
    });
  }
}

// Function to check user's quota status
async function handleQuotaStatus(event) {
  const userId = event.source.userId;
  
  try {
    const quota = await database.getUserQuota(userId);
    
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: `üìä **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì**

üî¢ **‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:** ${quota.remainingQueries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
üìà **‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß:** ${quota.usedQueries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
üíØ **‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:** ${quota.totalQueries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

üìÖ **‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** ${new Date(quota.lastUpdated).toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}

${quota.remainingQueries === 0 ? '‚ö†Ô∏è **‡∏´‡∏°‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡πâ‡∏ß** ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Admin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå' : '‚úÖ **‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**'}`
    });

  } catch (error) {
    console.error('Error checking quota status:', error);
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
    });
  }
}

module.exports = webhookHandler;
module.exports.__handleBirthChart = handleBirthChart;
module.exports.__handleEvent = handleEvent;
module.exports.__handlePostback = handlePostback;