// Worker-compatible version of LINE Controller
import { Client } from '@line/bot-sdk';
import { createMockEnv } from '../utils/worker-polyfills.js';

// Import services (these will need to be worker-compatible too)
// For now, we'll create a simplified version that works in Workers

const client = new Client({
  channelAccessToken: '', // Will be set from env
  channelSecret: ''       // Will be set from env
});

// Simplified webhook handler for Workers
export default async function webhookHandler(req, res, env) {
  try {
    // Initialize LINE client with environment variables
    const config = createMockEnv(env);
    const workerClient = new Client({
      channelAccessToken: config.line.channelAccessToken,
      channelSecret: config.line.channelSecret
    });

    console.log('Webhook request received:', {
      headers: req.headers,
      body: req.body
    });

    // Verify LINE signature (simplified)
    const signature = req.headers['x-line-signature'];
    if (!signature) {
      res.status(400).json({ error: 'Missing X-Line-Signature header' });
      return;
    }

    // Handle LINE events
    const events = req.body.events || [];
    
    for (const event of events) {
      console.log('Processing event:', event);
      
      switch (event.type) {
        case 'message':
          await handleMessage(event, workerClient, config);
          break;
        case 'postback':
          await handlePostback(event, workerClient, config);
          break;
        case 'follow':
          await handleFollow(event, workerClient, config);
          break;
        default:
          console.log('Unhandled event type:', event.type);
      }
    }

    res.status(200).json({ status: 'OK' });

  } catch (error) {
    console.error('Webhook error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: error.message 
    });
  }
}

async function handleMessage(event, client, config) {
  const userId = event.source.userId;
  const messageText = event.message.text;

  console.log('Handling message:', { userId, messageText });

  // Handle text commands
  if (messageText === '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î') {
    return handleTextCommand(event, client, config, 'input_birth_data');
  } else if (messageText === '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢') {
    return handleTextCommand(event, client, config, 'fortune', '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢');
  } else if (messageText === '‡∏û‡∏ö‡∏£‡∏±‡∏Å') {
    return handleTextCommand(event, client, config, 'fortune', '‡∏û‡∏ö‡∏£‡∏±‡∏Å');
  } else if (messageText === '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à') {
    return handleTextCommand(event, client, config, 'fortune', '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à');
  } else if (messageText === '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô') {
    return handleTextCommand(event, client, config, 'fortune', '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô');
  } else if (messageText === '‡∏•‡∏ö' || messageText === '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•') {
    return handleTextCommand(event, client, config, 'delete_all_data');
  }

  // Simple responses for now (in a real implementation, this would use the full services)
  if (messageText?.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || messageText?.includes('hello')) {
    await client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LuckSeeker Bot üåü\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏Ñ‡πà‡∏∞'
    });
  } else if (messageText?.includes('quota')) {
    await client.replyMessage(event.replyToken, {
      type: 'text',
      text: 'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n\nüî¢ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüìà ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: 0 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüíØ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n\n‚úÖ ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
    });
  } else if (messageText?.startsWith('birth:')) {
    // Handle birth data (simplified)
    await client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏î‡∏ß‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞'
    });
  } else {
    // Default response
    await client.replyMessage(event.replyToken, {
      type: 'flex',
      altText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†',
      contents: {
        type: 'bubble',
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: 'üåü LuckSeeker',
              weight: 'bold',
              size: 'xl',
              color: '#7B68EE',
              align: 'center'
            },
            {
              type: 'text',
              text: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ñ‡πà‡∏∞',
              size: 'md',
              align: 'center',
              margin: 'md'
            },
            {
              type: 'separator',
              margin: 'md'
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üé∞ ‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢',
                data: 'action=fortune&category=‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢'
              },
              style: 'primary',
              color: '#FF6B6B'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üíï ‡∏û‡∏ö‡∏£‡∏±‡∏Å',
                data: 'action=fortune&category=‡∏û‡∏ö‡∏£‡∏±‡∏Å'
              },
              style: 'primary',
              color: '#FF69B4',
              margin: 'sm'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üíº ‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
                data: 'action=fortune&category=‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à'
              },
              style: 'primary',
              color: '#4CAF50',
              margin: 'sm'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: 'üîÑ ‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
                data: 'action=fortune&category=‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'
              },
              style: 'primary',
              color: '#2196F3',
              margin: 'sm'
            }
          ]
        }
      }
    });
  }
}

async function handlePostback(event, client, config) {
  const data = event.postback.data;
  const params = new URLSearchParams(data);
  const action = params.get('action');
  const category = params.get('category');

  console.log('Handling postback:', { action, category });

  if (action === 'fortune') {
    // Simplified fortune response
    await client.replyMessage(event.replyToken, {
      type: 'text',
      text: `üîÆ ‡∏î‡∏ß‡∏á${category}\n\n‚≠ê ‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†: ‡∏î‡∏µ\nüéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: 85/100\nüé≤ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î: 15, 748\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${category} ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î\n\nü§ñ Powered by LuckSeeker AI`
    });
  } else if (action === 'input_birth_data') {
    await client.replyMessage(event.replyToken, {
      type: 'flex',
      altText: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î',
      contents: {
        type: 'bubble',
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: 'üìÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î',
              weight: 'bold',
              size: 'lg',
              color: '#7B68EE'
            },
            {
              type: 'text',
              text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
              size: 'sm',
              wrap: true,
              margin: 'md'
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'button',
              action: {
                type: 'uri',
                label: 'üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏î',
                uri: `https://liff.line.me/${config.line.liffId}`
              },
              style: 'primary',
              color: '#7B68EE'
            }
          ]
        }
      }
    });
  }
}

async function handleFollow(event, client, config) {
  const userId = event.source.userId;
  
  console.log('New follower:', userId);

  await client.replyMessage(event.replyToken, {
    type: 'text',
    text: 'üåü ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LuckSeeker!\n\n‡∏à‡∏π‡∏ô‡πÇ‡∏´‡∏£‡∏≤ ‡∏à‡∏π‡∏ô‡∏î‡∏ß‡∏á ‡∏à‡∏π‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï\n\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏î‡∏ß‡∏á 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ü‡∏£‡∏µ!\n\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô" ‡∏Ñ‡πà‡∏∞'
  });
}