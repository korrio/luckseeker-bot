const birthChartService = require('./birthChartService');
const aiService = require('./aiService');
const database = require('./database');

class FortuneService {
  async getFortune(birthChart, category, additionalData = {}, preferredProvider = 'chatgpt', userId = null) {
    try {
      // Check user quota if userId is provided
      if (userId) {
        console.log("userId",userId)
        const hasQuota = await database.checkUserQuota(userId);
        if (!hasQuota) {
          return this.getQuotaExceededMessage();
        }
      }

      const currentDate = new Date();
      
      const transits = birthChartService.calculateTransits(birthChart, currentDate);
      
      // Get user birth data if userId is provided
      let userBirthData = null;
      if (userId) {
        userBirthData = await database.getBirthData(userId);
      }
      
      const enhancedBirthChart = {
        ...birthChart,
        transits,
        currentDate: currentDate.toISOString(),
        additionalData,
        // Add user data if available
        ...(userBirthData && {
          birthdate: userBirthData.birthdate,
          birthtime: userBirthData.birthtime,
          latitude: userBirthData.latitude,
          longitude: userBirthData.longitude,
          gender: userBirthData.gender
        })
      };

      const fortuneResult = await aiService.getFortune(enhancedBirthChart, category, preferredProvider);

      // Decrement user quota after successful AI service call
      if (userId) {
        await database.decrementUserQuota(userId);
        const remainingQuota = await database.getUserQuota(userId);
        console.log(`User ${userId} quota used. Remaining: ${remainingQuota.remainingQueries}`);
      }

      console.log("fortuneResult",fortuneResult)
      
      return fortuneResult;
    } catch (error) {
      console.error('Error in fortune service:', error);
      return this.getFallbackFortune(category);
    }
  }

  calculateLuckyScore(transits) {
    let totalScore = 0;
    
    transits.forEach(transit => {
      totalScore += transit.score;
    });

    const normalizedScore = Math.max(0, Math.min(100, totalScore + 50));
    
    return Math.round(normalizedScore);
  }

  getLuckyNumbers(transits, luckyScore) {
    if (luckyScore < 80) {
      return null;
    }

    const positiveTransits = transits
      .filter(t => t.score > 0)
      .sort((a, b) => b.score - a.score);

    if (positiveTransits.length === 0) {
      return null;
    }

    const primaryTransit = positiveTransits[0];
    const secondaryTransit = positiveTransits[1];

    const luckyNumbers = {};

    if (primaryTransit) {
      const degree = Math.floor(Math.random() * 30) + 1;
      luckyNumbers.twoDigit = degree.toString().padStart(2, '0');
    }

    if (primaryTransit && secondaryTransit) {
      const degree1 = Math.floor(Math.random() * 30) + 1;
      const degree2 = Math.floor(Math.random() * 30) + 1;
      const degree3 = Math.floor(Math.random() * 30) + 1;
      luckyNumbers.threeDigit = `${degree1}${degree2}${degree3}`;
    }

    return luckyNumbers;
  }

  getFallbackFortune(category) {
    const categoryEmojis = {
      '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢': 'üé∞',
      '‡∏û‡∏ö‡∏£‡∏±‡∏Å': 'üíï', 
      '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à': 'üíº',
      '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô': 'üîÑ'
    };

    const emoji = categoryEmojis[category] || 'üåü';
    
    return `${emoji} ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡πà‡∏∞

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${category} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ:
- ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏î‡∏ß‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 3-7 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ
- ‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤

üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ LuckSeeker ‡∏Ñ‡πà‡∏∞`;
  }

  getQuotaExceededMessage() {
    return `üö´ **‡∏´‡∏°‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**

‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏Ñ‡∏£‡∏ö 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ

üìû **‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Admin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏î‡∏ß‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°**

üí´ **‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:**
- ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Admin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
- ‡∏£‡∏≠‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°

üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ LuckSeeker ‡∏Ñ‡πà‡∏∞`;
  }

  getFortuneCategories() {
    return [
      {
        id: '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢',
        name: '‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢',
        emoji: 'üé∞',
        description: '‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏† ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏ä‡∏Ñ'
      },
      {
        id: '‡∏û‡∏ö‡∏£‡∏±‡∏Å', 
        name: '‡∏û‡∏ö‡∏£‡∏±‡∏Å',
        emoji: 'üíï',
        description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏Ñ‡∏π‡πà‡∏Ñ‡∏£‡∏≠‡∏á ‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå'
      },
      {
        id: '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
        name: '‡∏î‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', 
        emoji: 'üíº',
        description: '‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô'
      },
      {
        id: '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
        name: '‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
        emoji: 'üîÑ', 
        description: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏á‡∏≤‡∏ô ‡∏¢‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô'
      }
    ];
  }
}

module.exports = new FortuneService();